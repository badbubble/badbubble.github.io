<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Exploring the inline phase of Graal compiler</title>
    <link href="/2024/05/08/explore_inline/"/>
    <url>/2024/05/08/explore_inline/</url>
    
    <content type="html"><![CDATA[<p>Before we dive deeper, let’s cover some basic concepts first.</p><p>The Java compiler is crucial for converting Java code into machine code. It generally operates in two modes:</p><ul><li>JIT (Just-in-Time), which compiles code as it’s needed during execution.</li><li>AOT (Ahead-of-Time), which compiles all the code before execution starts.</li></ul><p>The Java compiler in the JDK is called HotSpot. It includes three types:</p><ul><li>C0: The simplest form, a bytecode interpreter.</li><li>C1: The client compiler, it compiles quickly but with less optimization.</li><li>C2: The server compiler, which optimizes thoroughly but compiles slowly.</li></ul><p>When a program runs, it starts with C0 interpreting the bytecode. Then, to speed up execution, C1 quickly compiles the code. For code that’s run often, C2 takes over, producing highly optimized machine code.</p><p><img src="/../img/explore_inline/c0c1c2.jpg"></p><p>C2 performs aggressive optimizations by analyzing execution data, such as determining not to compile functions that are not used from begining of execution. However, these aggressive optimizations can sometimes lead to issues. For instance, if C2 chooses not to compile a function but it’s needed later, the VM has to rely on machine code generated by C1 or revert to using C0 to interpret it. This stage is called deoptimzation, which can result in performance drawbacks.</p><p>If a piece of code, usually a function, is executed a certain number of times, it’s recognized as a HotSpot and then compiled into machine code.</p><h2 id="Graal-compiler-written-in-Java"><a href="#Graal-compiler-written-in-Java" class="headerlink" title="Graal compiler written in Java"></a>Graal compiler written in Java</h2><p>The Java compiler in the JDK is written in C++, which can be challenging to read for some programmers(myself at the moment). Additionally, C++ can lead to memory and security issues, such as stack overflows and memory leaks.</p><p>The good news is there’s a Java compiler called Graal, which is written in Java itself. You can use the Graal compiler to replace the one inside the JDK, provided that the JDK version supports JVMCI (JVM Compiler Interface). Any JIT compiler that implements this interface can be used by the JVM.</p><p>GraalVM is a JVM developed by Oracle that uses Graal as its JIT compiler. It supports not only Java but also JavaScript, Ruby, R, and Python through a framework called Truffle layered on top of Graal. Additionally, it supports C, C++, and Rust by adding another layer on top of Truffle called Sulong.<br>GraalVM supports Ahead-of-Time (AOT) compilation. You can compile your project into a native image using GraalVM, which can significantly reduce startup time.<br><img src="/../img/explore_inline/graal_arch.jpg"></p><h3 id="Understanding-the-Graal-Compiler-by-building-modifying-and-debugging-it"><a href="#Understanding-the-Graal-Compiler-by-building-modifying-and-debugging-it" class="headerlink" title="Understanding the Graal Compiler by building, modifying, and debugging it"></a>Understanding the Graal Compiler by building, modifying, and debugging it</h3><p>Clone graal source code from Github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:oracle/graal.git<br></code></pre></td></tr></table></figure><p>Clone mx, the command-line tool used for the development of Graal projects</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:graalvm/mx.git<br></code></pre></td></tr></table></figure><p>Set mx in $PATH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/path/to/mx/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Install JDK supports JVMCI by using mx</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mx fetch-jdk</span><br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/fetch_jdk.jpg"><br>Set JAVA_HOME in $PATH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/path/to/.mx/jdks/labsjdk-ce-21-jvmci-23.1-b33/Contents/Home<br></code></pre></td></tr></table></figure><p>Move to graal compiler and compile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> graal/compiler/<br>mx build<br></code></pre></td></tr></table></figure><h2 id="Sea-of-Nodes"><a href="#Sea-of-Nodes" class="headerlink" title="Sea of Nodes"></a>Sea of Nodes</h2><pre><code class="bash">mx vm \  -XX:+UnlockExperimentalVMOptions \  -XX:+EnableJVMCI \  -XX:+UseJVMCICompiler \  -XX:-TieredCompilation \  -XX:CompileOnly=Foo \  -Dgraal.Dump \  -Xcomp \Foo</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
