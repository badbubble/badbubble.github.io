<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Exploring the InliningPhase of Graal compiler</title>
    <link href="/2024/05/08/explore_inline/"/>
    <url>/2024/05/08/explore_inline/</url>
    
    <content type="html"><![CDATA[<p>Before we dive deeper, let’s cover some basic concepts first.</p><p>The Java compiler is crucial for converting Java code into machine code. It generally operates in two modes:</p><ul><li>JIT (Just-in-Time), which compiles code as it’s needed during execution.</li><li>AOT (Ahead-of-Time), which compiles all the code before execution starts.</li></ul><p>The Java compiler in the JDK is called HotSpot. It includes three types:</p><ul><li>C0: The simplest form, a bytecode interpreter.</li><li>C1: The client compiler, it compiles quickly but with less optimization.</li><li>C2: The server compiler, which optimizes thoroughly but compiles slowly.</li></ul><p>When a program runs, it starts with C0 interpreting the bytecode. Then, to speed up execution, C1 quickly compiles the code. For code that’s run often, C2 takes over, producing highly optimized machine code.</p><p><img src="/../img/explore_inline/c0c1c2.jpg"></p><p>C2 performs aggressive optimizations by analyzing execution data, such as determining not to compile functions that are not used from begining of execution. However, these aggressive optimizations can sometimes lead to issues. For instance, if C2 chooses not to compile a function but it’s needed later, the VM has to rely on machine code generated by C1 or revert to using C0 to interpret it. This stage is called deoptimzation, which can result in performance drawbacks.</p><p>If a piece of code, usually a function, is executed a certain number of times, it’s recognized as a HotSpot and then compiled into machine code.</p><h2 id="Graal-compiler-written-in-Java"><a href="#Graal-compiler-written-in-Java" class="headerlink" title="Graal compiler written in Java"></a>Graal compiler written in Java</h2><p>The Java compiler in the JDK is written in C++, which can be challenging to read for some programmers(myself at the moment). Additionally, C++ can lead to memory and security issues, such as stack overflows and memory leaks.</p><p>The good news is there’s a Java compiler called Graal, which is written in Java itself. You can use the Graal compiler to replace the one inside the JDK, provided that the JDK version supports JVMCI (JVM Compiler Interface). Any JIT compiler that implements this interface can be used by the JVM.</p><p>GraalVM is a JVM developed by Oracle that uses Graal as its JIT compiler. It supports not only Java but also JavaScript, Ruby, R, and Python through a framework called Truffle layered on top of Graal. Additionally, it supports C, C++, and Rust by adding another layer on top of Truffle called Sulong.<br>GraalVM supports Ahead-of-Time (AOT) compilation. You can compile your project into a native image using GraalVM, which can significantly reduce startup time.<br><img src="/../img/explore_inline/graal_arch.jpg"></p><h3 id="Understanding-the-Graal-Compiler-by-building-modifying-and-debugging-it"><a href="#Understanding-the-Graal-Compiler-by-building-modifying-and-debugging-it" class="headerlink" title="Understanding the Graal Compiler by building, modifying, and debugging it"></a>Understanding the Graal Compiler by building, modifying, and debugging it</h3><p>Clone graal source code from Github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:oracle/graal.git<br></code></pre></td></tr></table></figure><p>Clone mx, the command-line tool used for the development of Graal projects</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:graalvm/mx.git<br></code></pre></td></tr></table></figure><p>Set mx in $PATH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/path/to/mx:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Install JDK supports JVMCI by using mx</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mx fetch-jdk</span><br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/fetch_jdk.jpg"><br>Set JAVA_HOME in $PATH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA_HOME=/path/to/.mx/jdks/labsjdk-ce-21-jvmci-23.1-b33/Contents/Home<br></code></pre></td></tr></table></figure><p>Move to graal compiler and compile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> graal/compiler/<br>mx build<br></code></pre></td></tr></table></figure><p>Before using Graal to compile and debug code, we need to configure the IDE. This article covers the setup for IntelliJ. For instructions on configuring other IDEs, you can refer to <a href="https://github.com/graalvm/mx/blob/master/docs/IDE.md">this document</a>.</p><p>For configuring IntelliJ, install the <a href="https://plugins.jetbrains.com/plugin/631-python">Python</a> plugin and then run the following command:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">mx intellijinit<br></code></pre></td></tr></table></figure><p>Now, we can use IntelliJ to open the graal&#x2F;compiler project and proceed with further steps.<br><img src="/../img/explore_inline/ide.png"></p><p>Let’s dive into the source code to understand what happens when you use Graal to compile. When a method is recognized as a HotSpot, the VM calls compileMethod (Just-In-Time compilation) to compile it. This compileMethod is located in the <code>jdk.graal.compiler.hotspot package</code>.</p><p>Add a prinln function to see if it will be called.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> CompilationRequestResult <span class="hljs-title function_">compileMethod</span><span class="hljs-params">(CompilationRequest request)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Begin to compile method: &quot;</span> + request.getMethod().getName() + <span class="hljs-string">&quot;\nbytecode: &quot;</span> + java.util.Arrays.toString(request.getMethod().getCode()));<br>    <span class="hljs-keyword">return</span> compileMethod(<span class="hljs-built_in">this</span>, request);<br>&#125;<br></code></pre></td></tr></table></figure><p>We can write a simple Java program to test the Graal compiler. In the code below, we create an add method and call it repeatedly in a for-loop, which will turn it into a HotSpot method. Graal will then compile this method into machine code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Foo.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>           <span class="hljs-keyword">if</span>(i%<span class="hljs-number">1000</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br>            &#125;<br>            i++;<br>            add(i,i+<span class="hljs-number">1</span>);   <br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-keyword">return</span> x + y;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Using Graal to compile Java code:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">javac <span class="hljs-title class_">Foo</span>.java<br>mx vm \<br>  -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+UnlockExperimentalVMOptions</span> \<br>  -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+EnableJVMCI</span> \<br>  -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:+UseJVMCICompiler</span> \<br>  -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:-TieredCompilation</span> \<br>  -<span class="hljs-variable constant_">XX</span><span class="hljs-symbol">:CompileOnly=Foo</span>.add \<br><span class="hljs-title class_">Foo</span>  <br></code></pre></td></tr></table></figure><ul><li>vm: the first time you run the command mx vm, it will copy the Java HotSpot VM from the JDK to Graal and create a new GraalVM instance</li><li>-XX:+UnlockExperimentalVMOptions: Enale experimental features</li><li>-XX:+EnableJVMCI: Enable JVMCI</li><li>-XX:+UseJVMCICompiler: Using Graal to compile</li><li>-XX:-TieredCompilation: Disable tiered compilation, we will talk about it later</li><li>-XX:CompileOnly&#x3D;Foo.add: Only compiles the add method in Foo class<br><img src="/../img/explore_inline/ide.png"></li></ul><p>When the add method has been executed many times, it will be recognized as a HotSpot and compiled. You can use the -XX:CompileThreshold option to control the number of executions after which a method should be compiled.</p><p><code>-d</code> option in <code>mx</code> allows you to debug the compilation process:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mx -d vm \<br>  -XX:+UnlockExperimentalVMOptions \<br>  -XX:+EnableJVMCI \<br>  -XX:+UseJVMCICompiler \<br>  -XX:-TieredCompilation \<br>  -XX:CompileOnly=Foo.add \<br>Foo  <br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/mx-debug.png"></p><p>After executing the above command, set a breakpoint in IntelliJ IDEA and click the debug button to start debugging.<br><img src="/../img/explore_inline/ide-debug.png"><br>We can now debug the compiler and analyze its behavior. :)<br><img src="/../img/explore_inline/ide-debug-real.png"></p><h2 id="Sea-of-Nodes"><a href="#Sea-of-Nodes" class="headerlink" title="Sea of Nodes"></a>Sea of Nodes</h2><p>I recommend reading <a href="https://ssw.jku.at/General/Staff/GD/APPLC-2013-paper_12.pdf">Graal IR: An Extensible Declarative Intermediate Representation</a> and <a href="https://chrisseaton.com/truffleruby/basic-graal-graphs">Understanding Basic Graal Graphs</a>, as I only provide a summary of them in this blog.</p><p>Graal converts bytecode into a graph Intermediate Representation (IR). It bridges the huge semantic gap between high-level languages and machine languages. We can use <a href="https://www.oracle.com/downloads/graalvm-downloads.html">IGV</a> or <a href="https://github.com/Shopify/seafoam">seafoam</a> to display the generated IR graph.</p><p>Recompile <code>Foo.java</code> with two new parameters: <code>-Dgraal.Dump</code> to dump IR and <code>-Xcomp</code> to compile every function the compiler encounters for the first time.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mx vm \<br>  -XX:+UnlockExperimentalVMOptions \<br>  -XX:+EnableJVMCI \<br>  -XX:+UseJVMCICompiler \<br>  -XX:-TieredCompilation \<br>  -XX:CompileOnly=Foo.add \<br>  -Dgraal.Dump \<br>  -Xcomp \<br>Foo  <br></code></pre></td></tr></table></figure><p>Then we use <code>seafoam</code> to generate a graph:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">seafoam graal_dumps/2024.06.01.12.15.39.071/HotSpotCompilation-115\[Foo.add\(int,_int\)int\].bgv:0 render<br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/ir_0.png"></p><p>A Graal graph has nodes(instructions) and edges(data-flow or control-flow)</p><ul><li>A green data-flow edge measn that the result of a node(instruction) is used as input to another node.</li><li>A red control-flow edge means that control passes from one node, which is executed first, to another, which is executed next.</li><li>P(0) the first parameter</li><li>P(1) the second parameter</li><li>x, y addition labels have nothing to do with source code<br>The biggest advantage of Sea of Nodes is that it can reflect control flow and data flow simultaneously with a data structure, and minimize their interdependence as much as possible.</li></ul><p>When using <code>idealgraphvisualizer</code>, I encountered the issue of <code>java.lang.NullPointerException: Cannot invoke &quot;org.graalvm.visualizer.script.UserScriptEngine.prepare()</code>. As a result, I had to switch to a different JDK.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mx -p graal/compiler igv --jdkhome /Users/badbubble/Library/Java/JavaVirtualMachines/corretto-18.0.2/Contents/Home<br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/idealGraphVisualizer.png" alt="idealGraphVisualizer"></p><p>When you run <code>idealGraphVisualizer</code>, it will listen on port 4445 for messages from <code>GraalVM</code>. Therefore, you need to compile the program by running <code>mx vm</code> after starting <code>idealGraphVisualizer</code>.</p><h3 id="Data-flow"><a href="#Data-flow" class="headerlink" title="Data-flow"></a>Data-flow</h3><p>In the Intermediate Representation (IR) below, blue edges indicate the flow of data. Parameter 0 and parameter 1 flow to the <code>+</code> node before continuing to the <code>Return</code> node.<br><img src="/../img/explore_inline/data-flow.png" alt="data-flow"></p><p>The Add node has two inputs, which are x and y, these two inputs are the two attributes of the AddNode. Note that the direction of the arrow in this diagram represents data dependency, that is, the Add node maintains references to its two input nodes, which is actually consistent with AST. The flow of data, on the other hand, is reversed from x and y flowing towards the Add node.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">AddNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> &#123; <br>    <span class="hljs-meta">@Input</span> Node left;<br>    <span class="hljs-meta">@Input</span> Node right;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/addnode.png" alt="add node"></p><h3 id="Control-flow"><a href="#Control-flow" class="headerlink" title="Control-flow"></a>Control-flow</h3><p><img src="/../img/explore_inline/data-flow.png" alt="control-flow"><br>Red edges indicate control flow in the graph. You can navigate through the graph starting from the Start node following the control flow. To reach the Return node, you need to calculate the data (x+y).</p><h3 id="FloatingNode-and-FixedNode"><a href="#FloatingNode-and-FixedNode" class="headerlink" title="FloatingNode and FixedNode"></a>FloatingNode and FixedNode</h3><p>The main advantage of Sea of Nods is that it allows you to use a single data structure to represent both control-flow and data-flow, while minimizing their interdependence. For example, in the following <code>loop</code> function we can remove <code>int b = x * 2</code> from this for-loop since it does not use variable i or the for loop itself. In other representations, it might be necessary to analyze that <code>int b</code> is not related to the for-loop. However, in <code>Sea of Nodes</code>, <code>int b</code> does not belong to any blocks, nodes with flexibility in execution time, we say they are floating.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">loop</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-comment">// here</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> x * <span class="hljs-number">2</span>;<br>        sum += b;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In addition to floating nodes, there are also some nodes that are fixed in the control flow and cannot be out of order. These nodes are called fixed nodes. Apart from those process control type of nodes (such as IfNode).</p><h3 id="FrameState"><a href="#FrameState" class="headerlink" title="FrameState"></a>FrameState</h3><p>It saved the state of the stack frame.</p><ul><li>deoptimization: C2 aggressively optimizes code and may require deoptimization during execution.</li><li>debug</li></ul><h3 id="the-processing-steps-of-Graal-IR"><a href="#the-processing-steps-of-Graal-IR" class="headerlink" title="the processing steps of Graal IR"></a>the processing steps of Graal IR</h3><p>By adding <code>-Dgraal.Dump=:5</code>, GraalVM will dump every processing steps, we can see phase inlining in it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mx vm \<br>  -XX:+UnlockExperimentalVMOptions \<br>  -XX:+EnableJVMCI \<br>  -XX:+UseJVMCICompiler \<br>  -XX:-TieredCompilation \<br>  -XX:CompileOnly=Foo.add \<br>  -Dgraal.Dump=:5 \<br>  -Xcomp \<br>Foo  <br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/processing_steps.png" alt="processing-step"></p><h2 id="Inlining"><a href="#Inlining" class="headerlink" title="Inlining"></a>Inlining</h2><p>Inline optimization is a very important optimization strategy for the Java JIT compiler. Simply put, inlining is to expand the body of the called method at the place of call. The biggest advantage of doing this is to save the overhead of function calls. For frequently called functions, inline optimization can greatly improve program performance.</p><ul><li>Inline optimization has certain conditions:<ul><li>the method to be inlined must be a hotspot method</li><li>the method to be inlined cannot be too large</li></ul></li></ul><p>There are many getter and setter methods in a program. If we do not optimize them inline, it could affect the program’s performance.</p><p>We write the test code and build it using the <code>-XX:-Inline</code> parameter to disable inlining:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">X</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">Y</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">1000</span>==<span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Thread.sleep(<span class="hljs-number">100</span>);<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br>            &#125;<br>            i++;<br>            add2();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getX</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> X;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getY</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Y;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> getX() + getY();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">mx vm \<br>  -XX:+UnlockExperimentalVMOptions \<br>  -XX:+EnableJVMCI \<br>  -XX:+UseJVMCICompiler \<br>  -XX:-TieredCompilation \<br>  -XX:CompileOnly=Foo.add2 \<br>  -XX:-Inline \<br>  -Dgraal.Dump=:5 \<br>  -Xcomp \<br>Foo  <br></code></pre></td></tr></table></figure><p><img src="/../img/explore_inline/add2_before_inline.png" alt="before inlining"></p><p>then we remove <code>-XX:-Inline</code> to enable inlining:<br><img src="/../img/explore_inline/add2_after_inline.png" alt="after inlining"></p><h3 id="InliningPolicy"><a href="#InliningPolicy" class="headerlink" title="InliningPolicy"></a>InliningPolicy</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InliningPolicy</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Decision</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Decision</span> <span class="hljs-variable">YES</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decision</span>(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;(unknown reason)&quot;</span>);<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Decision</span> <span class="hljs-variable">NO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decision</span>(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;(unknown reason)&quot;</span>);<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> shouldInline;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String reason;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-title function_">Decision</span><span class="hljs-params">(<span class="hljs-type">boolean</span> shouldInline, String reason)</span> &#123;<br>            <span class="hljs-built_in">this</span>.shouldInline = shouldInline;<br>            <span class="hljs-built_in">this</span>.reason = reason;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldInline</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> shouldInline;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getReason</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> reason;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * This constructor avoids the need to box arguments when the message is a simple string.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> Decision <span class="hljs-title function_">withReason</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isTracing, String newReason)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isTracing) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decision</span>(shouldInline, newReason);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Decision <span class="hljs-title function_">withReason</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isTracing, String newReason, Object... args)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isTracing) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Decision</span>(shouldInline, String.format(newReason, args));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">continueInlining</span><span class="hljs-params">(StructuredGraph graph)</span>;<br><br>    Decision <span class="hljs-title function_">isWorthInlining</span><span class="hljs-params">(Replacements replacements, MethodInvocation invocation, InlineInfo calleeInfo, <span class="hljs-type">int</span> inliningDepth, <span class="hljs-type">boolean</span> fullyProcessed)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="GreedyInliningPolicy"><a href="#GreedyInliningPolicy" class="headerlink" title="GreedyInliningPolicy"></a>GreedyInliningPolicy</h3><h3 id="InlineEverythingPolicy"><a href="#InlineEverythingPolicy" class="headerlink" title="InlineEverythingPolicy"></a>InlineEverythingPolicy</h3><h3 id="AbstractInliningPolicy"><a href="#AbstractInliningPolicy" class="headerlink" title="AbstractInliningPolicy"></a>AbstractInliningPolicy</h3><h3 id="InlineMethodSubstitutionsPolicy"><a href="#InlineMethodSubstitutionsPolicy" class="headerlink" title="InlineMethodSubstitutionsPolicy"></a>InlineMethodSubstitutionsPolicy</h3><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://time.geekbang.org/column/intro/100052801">编译原理实战课程</a></li><li><a href="https://github.com/oracle/graal/blob/master/compiler/docs/Debugging.md">debugging the GraalVM compiler</a></li><li><a href="https://link.springer.com/chapter/10.1007/3-540-48743-3_12">Inlining of Virtual Methods</a></li><li><a href="https://chrisseaton.com/truffleruby/basic-graal-graphs">Understanding Basic Graal Graphs</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
